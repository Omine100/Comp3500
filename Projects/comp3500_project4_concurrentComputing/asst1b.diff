diff --git a/kern/asst1/catsem.c b/kern/asst1/catsem.c
index dcb257b..6ed4d26 100644
--- a/kern/asst1/catsem.c
+++ b/kern/asst1/catsem.c
@@ -2,82 +2,154 @@
  * catsem.c
  *
  * 30-1-2003 : GWA : Stub functions created for CS161 Asst1.
- *
- * NB: Please use SEMAPHORES to solve the cat syncronization problem in 
- * this file.
  */
 
-
 /*
- * 
  * Includes
- *
  */
 
 #include <types.h>
 #include <lib.h>
 #include <test.h>
 #include <thread.h>
-
+#include <synch.h>
 
 /*
- * 
  * Constants
- *
- */
-
-/*
- * Number of food bowls.
  */
 
+//Number of bowls, cats, mice, and time
 #define NFOODBOWLS 2
+#define NCATS 6
+#define NMICE 2
 
-/*
- * Number of cats.
- */
+#define true 1
+#define false 0
+typedef char bool;
 
-#define NCATS 6
+//Variable and resource declarations
+static const char *cat_array[6] = {"A", "B", "C", "D", "E", "F"};
+static const char *mice_array[2] = {"G", "H"};
 
-/*
- * Number of mice.
- */
+volatile bool all_dishes_available;
+struct semaphore *done;
+struct semaphore *mutex;
+struct semaphore *dish_mutex;
+volatile bool dish1_busy;
+volatile bool dish2_busy;
+struct semaphore *count;
 
-#define NMICE 2
+struct semaphore *cats_queue;
+volatile int cats_wait_count;
+volatile bool no_cat_eat;
 
+struct semaphore *mice_queue;
+volatile int mice_wait_count;
+volatile bool no_mouse_eat;
 
 /*
- * 
  * Function Definitions
- * 
  */
 
-
 /*
  * catsem()
  *
  * Arguments:
  *      void * unusedpointer: currently unused.
  *      unsigned long catnumber: holds the cat identifier from 0 to NCATS - 1.
- *
  * Returns:
  *      nothing.
- *
- * Notes:
- *      Write and comment this function using semaphores.
- *
  */
 
-static
-void
-catsem(void * unusedpointer, 
-       unsigned long catnumber)
-{
-        /*
-         * Avoid unused variable warnings.
-         */
+static void catsem(void * unusedpointer, unsigned long catnumber) {
+	volatile bool first_cat_eat;
+        volatile bool another_cat_eat;
+        volatile int my_dish; 
 
-        (void) unusedpointer;
+	(void) unusedpointer;
         (void) catnumber;
+
+	int i;
+	for (i = 0; i < 4; i++) {
+		//First cat, no mouse
+		P(mutex);
+		if (all_dishes_available == true) {
+			all_dishes_available = false;
+			V(cats_queue);
+		}
+		cats_wait_count++;
+		V(mutex);
+
+		//First cat, second cat wait
+		P(cats_queue);
+		if (no_cat_eat == true) {
+			no_cat_eat = false;
+			first_cat_eat = true;
+		} else {
+			first_cat_eat = false;
+		}
+
+		//First cat controls the kitchen
+		if (first_cat_eat == true) {
+			P(mutex);
+			if (cats_wait_count > 1) {
+				another_cat_eat = true;
+				V(cats_queue);
+			} else {
+				another_cat_eat = false;
+			}
+			V(mutex);
+		}
+		kprintf("Cat in the kitchen named %s \n", cat_array[catnumber]);
+
+		//First and non-first cat in the kitchen
+		P(dish_mutex);
+		if (dish1_busy == false) {
+			dish1_busy = true;
+			my_dish = 1;
+		} else {
+			dish2_busy = true;
+			my_dish = 2;
+		}
+		V(dish_mutex);
+		kprintf("Cat in the kitchen named %s \n", cat_array[catnumber]);
+		clocksleep(1);
+		kprintf("Cat finished eating named %s \n", cat_array[catnumber]);
+
+		//First and non-first cat in the kitchen, release dishes
+		P(dish_mutex);
+		if (my_dish == 1) {
+			dish1_busy = false;
+		} else {
+			dish2_busy = false;
+		}
+		V(dish_mutex);
+		P(mutex);
+		cats_wait_count--;
+		V(mutex);
+
+		//First cat is leaving the kitchen
+		if (first_cat_eat == true) {
+			if (another_cat_eat == true) {
+				P(done);
+			}
+			kprintf("First cat is leaving.\n");
+			no_cat_eat = true;
+			P(mutex);
+			if (mice_wait_count > 0) {
+				V(mice_queue);
+			} else if (cats_wait_count > 0) {
+				V(cats_queue);
+			} else {
+				all_dishes_available = true;
+			}
+			V(mutex);
+		} else {
+			kprintf("Non-first cat is leaving");
+			V(done);
+		}
+	}
+	V(count);
 }
         
 
@@ -88,26 +160,99 @@ catsem(void * unusedpointer,
  *      void * unusedpointer: currently unused.
  *      unsigned long mousenumber: holds the mouse identifier from 0 to 
  *              NMICE - 1.
- *
  * Returns:
  *      nothing.
- *
- * Notes:
- *      Write and comment this function using semaphores.
- *
  */
 
-static
-void
-mousesem(void * unusedpointer, 
-         unsigned long mousenumber)
-{
-        /*
-         * Avoid unused variable warnings.
-         */
+static void mousesem(void * unusedpointer, unsigned long mousenumber) {
+	volatile bool first_mouse_eat;
+        volatile bool another_mouse_eat;
+        volatile int my_dish;
 
         (void) unusedpointer;
         (void) mousenumber;
+	
+	int i;
+	for (i = 0; i < 4; i++) {
+		//First mouse with no cat
+		P(mutex);
+		if (all_dishes_available == true) {
+			all_dishes_available = false;
+			V(mice_queue);
+		}
+		mice_wait_count++;
+		V(mutex);
+
+		//First mouse, second mouse wait
+		P(mice_queue);
+		if (no_mouse_eat == true) {
+          		no_mouse_eat = false;
+          		first_mouse_eat = true;
+       		} else {
+          		first_mouse_eat = false;
+        	}
+
+		//First mouse controls mice
+		if (first_mouse_eat == true) {
+         		P(mutex);
+          		if (mice_wait_count > 1) {
+            			another_mouse_eat = true;
+            			V(mice_queue);
+          		} else {
+            			another_mouse_eat = false;
+          		}
+          	V(mutex);
+        	}
+		kprintf("Mouse entered the kitchen named %s \n", mice_array[mousenumber]);
+
+		//Both mice in the kitchen
+		P(dish_mutex);
+		if (dish1_busy == false) {
+			dish1_busy = true;
+			my_dish = 1;
+		} else {
+			dish2_busy = true;
+			my_dish = 2;
+		}
+		V(dish_mutex);
+		kprintf("Mouse in the kitchen named %s \n", mice_array[mousenumber]);
+		clocksleep(1);
+		kprintf("Mouse finished eating named %s \n", mice_array[mousenumber]);
+		
+		//Both mice in the kitchen, release dishes
+		P(dish_mutex);
+		if (my_dish == 1) {
+			dish1_busy = false;
+		} else {
+			dish2_busy = false;
+		}
+		V(dish_mutex);
+		P(mutex);
+          	mice_wait_count--;
+        	V(mutex);
+
+		//First mouse is leaving the kitchen
+		if (first_mouse_eat == true) {
+			if (another_mouse_eat == true) {
+				P(done);
+			}
+			kprintf("First mouse is leaving.\n");
+			no_mouse_eat = true;
+			P(mutex);
+			if (cats_wait_count > 0) {
+				V(cats_queue);
+			} else if (mice_wait_count > 0) {
+				V(mice_queue);
+			} else {
+				all_dishes_available = true;
+			}
+			V(mutex);
+		} else {
+			kprintf("Second mouse is leaving the kitchen");
+			V(done);
+		}
+	}
+	V(count);
 }
 
 
@@ -117,50 +262,44 @@ mousesem(void * unusedpointer,
  * Arguments:
  *      int nargs: unused.
  *      char ** args: unused.
- *
  * Returns:
  *      0 on success.
- *
- * Notes:
- *      Driver code to start up catsem() and mousesem() threads.  Change this 
- *      code as necessary for your solution.
  */
 
-int
-catmousesem(int nargs,
-            char ** args)
-{
+int catmousesem(int nargs, char ** args) {
         int index, error;
-   
-        /*
-         * Avoid unused variable warnings.
-         */
 
         (void) nargs;
         (void) args;
+
+	cats_queue = sem_create("cats semaphore", (int) 0);        
+        mice_queue = sem_create("mice semaphore", (int) 0);
+	done = sem_create("done eating semaphore", (int) 0);
+        mutex = sem_create("mutex", (int) 1);
+        dish_mutex = sem_create("dish semaphore", (int) 1);
+        count = sem_create("count", (int) 0);
+
+	all_dishes_available = true;
+        dish1_busy = false;
+        dish2_busy = false;
+        mice_wait_count = 0;
+        cats_wait_count = 0;
+        no_cat_eat = true;
+        no_mouse_eat = true;
    
         /*
          * Start NCATS catsem() threads.
          */
 
         for (index = 0; index < NCATS; index++) {
-           
-                error = thread_fork("catsem Thread", 
-                                    NULL, 
-                                    index, 
-                                    catsem, 
-                                    NULL
-                                    );
+                error = thread_fork("catsem Thread", NULL, index, catsem, NULL);
                 
                 /*
                  * panic() on error.
                  */
 
                 if (error) {
-                 
-                        panic("catsem: thread_fork failed: %s\n", 
-                              strerror(error)
-                              );
+                        panic("catsem: thread_fork failed: %s\n", strerror(error));
                 }
         }
         
@@ -169,29 +308,31 @@ catmousesem(int nargs,
          */
 
         for (index = 0; index < NMICE; index++) {
-   
-                error = thread_fork("mousesem Thread", 
-                                    NULL, 
-                                    index, 
-                                    mousesem, 
-                                    NULL
-                                    );
+        	error = thread_fork("mousesem Thread", NULL, index, mousesem, NULL);
                 
                 /*
                  * panic() on error.
                  */
 
                 if (error) {
-         
-                        panic("mousesem: thread_fork failed: %s\n", 
-                              strerror(error)
-                              );
+                        panic("mousesem: thread_fork failed: %s\n", strerror(error));
                 }
         }
 
-        return 0;
-}
+	int i;
+	for (i = 0; i < (NCATS + NMICE); i++) {
+		P(count);
+	}
+
+	sem_destroy(cats_queue);
+        sem_destroy(mice_queue);
+	sem_destroy(done);
+        sem_destroy(mutex);
+        sem_destroy(dish_mutex);
+        sem_destroy(count);
 
+	return 0;
+}
 
 /*
  * End of catsem.c
diff --git a/kern/compile/ASST1/catsem.o b/kern/compile/ASST1/catsem.o
index 46e4b42..bb9783c 100644
Binary files a/kern/compile/ASST1/catsem.o and b/kern/compile/ASST1/catsem.o differ
diff --git a/kern/compile/ASST1/depend.mk b/kern/compile/ASST1/depend.mk
index 3861979..ac05469 100644
--- a/kern/compile/ASST1/depend.mk
+++ b/kern/compile/ASST1/depend.mk
@@ -103,7 +103,8 @@ catlock.o: ../../asst1/catlock.c ../../include/types.h machine/types.h \
   ../../include/test.h ../../include/thread.h machine/pcb.h
 catsem.o: ../../asst1/catsem.c ../../include/types.h machine/types.h \
   ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
-  ../../include/test.h ../../include/thread.h machine/pcb.h
+  ../../include/test.h ../../include/thread.h machine/pcb.h \
+  ../../include/synch.h
 sfs_vnode.o: ../../fs/sfs/sfs_vnode.c ../../include/types.h \
   machine/types.h ../../include/kern/types.h ../../include/lib.h \
   machine/setjmp.h ../../include/synch.h ../../include/array.h \
diff --git a/kern/compile/ASST1/kernel b/kern/compile/ASST1/kernel
index 2276ae6..7dd24d5 100755
Binary files a/kern/compile/ASST1/kernel and b/kern/compile/ASST1/kernel differ
diff --git a/kern/compile/ASST1/vers.c b/kern/compile/ASST1/vers.c
index 364b4fb..7b89ab7 100644
--- a/kern/compile/ASST1/vers.c
+++ b/kern/compile/ASST1/vers.c
@@ -1,3 +1,3 @@
 /* This file is automatically generated. Edits will be lost.*/
-const int buildversion = 54;
+const int buildversion = 56;
 const char buildconfig[] = "ASST1";
diff --git a/kern/compile/ASST1/vers.o b/kern/compile/ASST1/vers.o
index 81a4c6e..b7697f4 100644
Binary files a/kern/compile/ASST1/vers.o and b/kern/compile/ASST1/vers.o differ
diff --git a/kern/compile/ASST1/version b/kern/compile/ASST1/version
index fb1e7bc..f6b91e0 100644
--- a/kern/compile/ASST1/version
+++ b/kern/compile/ASST1/version
@@ -1 +1 @@
-54
+56
